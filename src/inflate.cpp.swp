
#include <iostream>
#include <cstring>
#include <cctype>
#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <vector>
#include <algorithm>
#include <map>
#include "err_handle.h"
#include "pdf.h"

//YOur project must also include zdll.lib (ZLIB) as a dependency.
//ZLIB can be freely downloaded from the internet, www.zlib.org
//Use 4 byte struct alignment in your project!

#include "zlib.h"


static bool intextobject = false;

using namespace std;

 int origin_map_len = 0;
map<string,string> codeMap;
extern char *origin_map;


//Find a string in a buffer:
size_t FindStringInBuffer (char* buffer, const char* search, size_t buffersize)
{
    char* buffer0 = buffer;

    size_t len = strlen(search);
    bool fnd = false;
    while (!fnd)
    {
        fnd = true;
        for (size_t i=0; i<len; i++)
        {
            if (buffer[i]!=search[i])
            {
                fnd = false;
                break;
            }
        }
        if (fnd) return buffer - buffer0;
        buffer = buffer + 1;
        if (buffer - buffer0 + len >= buffersize) return -1;
    }
    return -1;
}

//Keep this many previous recent characters for back reference:
#define oldchar 15

//Convert a recent set of characters into a number if there is one.
//Otherwise return -1:
float ExtractNumber(const char* search, int lastcharoffset)
{
    int i = lastcharoffset;
    while (i>0 && search[i]==' ') i--;
    while (i>0 && (isdigit(search[i]) || search[i]=='.')) i--;
    float flt=-1.0;
    char buffer[oldchar+5];
    bzero(buffer,sizeof(buffer));
    strncpy(buffer, search+i+1, lastcharoffset-i);
    if (buffer[0] && sscanf(buffer, "%f", &flt))
    {
        return flt;
    }
    return -1.0;
}

//Check if a certain 2 character token just came along (e.g. BT):
bool seen2(const char* search, char* recent)
{
    if (    recent[oldchar-3]==search[0]
            && recent[oldchar-2]==search[1]
            && (recent[oldchar-1]==' ' || recent[oldchar-1]==0x0d || recent[oldchar-1]==0x0a)
            && (recent[oldchar-4]==' ' || recent[oldchar-4]==0x0d || recent[oldchar-4]==0x0a)
       )
    {
        return true;
    }
    return false;
}
//This method processes an uncompressed Adobe (text) object and extracts text.
void  ProcessOutput(FILE* file, unsigned char* output, uLongf len,vector<string> &svec)
{
    //Are we currently inside a text object?

    //Is the next stringacter literal (e.g. \\ to get a \ character or \( to get ( ):
    bool nextliteral = false;

    //() Bracket nesting level. Text appears inside ()
    int rbdepth = 0;


    int rbdepth_map = 0;


    bool tmfront = false;

    float frontOp6 = 0.0;

    //Keep previous strings to get extract numbers etc.:
    char oc[oldchar];
    string fname;
    int j=0;
    for (j=0; j<oldchar; j++) oc[j]=' ';

    for (size_t i=0; i<len; i++)
    {
        char c = output[i];
        if (intextobject)
        {
            //保存当前字形Fn，为编码做准备
            if(rbdepth == 0 && strncmp(( char*)&output[i],"/F",2)==0)
            {
                fname.clear();
                fname+=output[i+1];
                fname+=output[i+2];
                //fname[0] = output[i+1];
                //fname[1] = output[i+2];

                printf("fname:%s\n",fname.c_str());

            }

            if (rbdepth==0 && seen2("Tm", oc))
            {
                if(!tmfront)
                {
                    float currOp6 = ExtractNumber(oc,oldchar-5);

                    if (frontOp6 - currOp6 > 1 || currOp6 - frontOp6 > 1 )
                    {
                        fputc(0x0d, file);
                        fputc(0x0a, file);
                    }
                    frontOp6 = currOp6;
                }
                else
                {
                    tmfront = true;
                    frontOp6 = ExtractNumber(oc,oldchar-5);

                }
            }

            if (rbdepth==0 && seen2("TD", oc))
            {
                //Positioning.
                //See if a new line has to start or just a tab:
                float num = ExtractNumber(oc,oldchar-5);
                if (num>1.0)
                {
                    fputc(0x0d, file);
                    fputc(0x0a, file);
                }
                if (num<1.0)
                {
                  //  fputc('\t', file);
                }
            }

            if (rbdepth==0 && seen2("T*", oc))
            {
                    fputc(0x0d, file);
                    fputc(0x0a, file);
            }
            if (rbdepth==0 && seen2("ET", oc))
            {
                //End of a text object, also go to a new line.
                intextobject = false;
                fputc(0x0d, file);
                fputc(0x0a, file);
            }
            else if (c=='(' && rbdepth==0 && !nextliteral)
            {
                //Start outputting text!
                rbdepth=1;
                //See if a space or tab (>1000) is called for by looking
                //at the number in front of (
                int num = ExtractNumber(oc,oldchar-1);
                if (num>0)
                {
                    if (num>1000.0)
                    {
                        fputc('\t', file);
                    }
                    else if (num>100.0)
                    {
                        fputc(' ', file);
                    }
                }
            }
            else if (c==')' && rbdepth==1 && !nextliteral)
            {
                //Stop outputting text
                rbdepth=0;
            }
            else if(c=='<' && rbdepth_map == 0 )
            {
               //*(origin_map++) = c;
              //  origin_map[origin_map_len++] = c;

                rbdepth_map = 1;
                if((find(svec.begin(),svec.end(),fname)) == svec.end())
                {
                    svec.push_back(fname);
                }
            }

            else if(c=='>' && rbdepth_map == 1 && !nextliteral)
            {
              // *(origin_map++) = c;
             //   origin_map[origin_map_len++] = c;
                rbdepth_map = 0;
            }
            else if (rbdepth==1 )
            {
                //Just a normal text stringacter:
                if (c=='\\' && !nextliteral)
                {
                    //Only print out next stringacter no matter what. Do not interpret.
                    nextliteral = true;
                }
                else
                {
                    nextliteral = false;
                    if ( ((c>=' ') && (c<='~')) || ((c>=128) && (c<255)) )
                    {
                        fwrite(&c,1,1,file);
                   //     fflush(file);

                    }
                }
            }
            else if(rbdepth_map == 1)
            {
                origin_map[origin_map_len++] = c;
            }
        }
        //Store the recent stringacters for when we have to go back for a number:
        for (j=0; j<oldchar-1; j++) oc[j]=oc[j+1];
        oc[oldchar-1]=c;
        if (!intextobject)
        {
            if (seen2("BT", oc))
            {
                //  for (int jx=0; jx<oldchar; jx++)
                //Start of a text object:
                intextobject = true;
            }
        }
    }
}

int parse_unicodeMap(char *line,map<string,string> &codeMap)
{
    char *p = line;
    char *pos;
    char srcCode[12] = {0},dstCode[12] = {0};
    char temp1[5] = {0},temp2[5] = {0};
    string src,dst;
    bool flag = false;
    int num = 0;


    if((pos=strchr(line,'[')) == NULL)
        if(sscanf(line,"%s %s",srcCode,dstCode)!=2)
            err_ret("map format error,not <srcCode> <dstCode>");
        else
        {
            src = strncpy(temp1,srcCode+1,4);
            dst = strncpy(temp1,dstCode+1,4);
            printf("srcCode:%s,dstCode:%s\n",src.c_str(),dst.c_str());
            codeMap[src] = dst;
        }
    else
    {


    }
    return 1;
}

void  ProcessOutput_map(FILE* file, unsigned char* output, uLongf len)
{
    size_t start = FindStringInBuffer((char*)output,"beginbfchar",len);

    if (output[start]==0x0d && output[start+1]==0x0a)
        start+=2;
    else if(output[start]==0x0a)
        start++;

    size_t end = FindStringInBuffer((char*)output,"endbfchar",len);

    char line[255];

    int j = 0;

    char *pos;

    size_t i = 0;
    for (i = start + 11 + 1; i < end; i++)
    {
        //将每行存下来
        char c1 = output[i];
        if(c1 == 0x0a)
        {
            line[j++] = '\0';
            //new line  dealing previous line
            printf("line:%s\n",line);

            parse_unicodeMap(line,codeMap);

            bzero(line,sizeof(line));
            j = 0;
            continue;

        }
        else
            line[j++] = c1;
    }

}

/*buf:经过unzip解压后的数据
 * length:数据长度
 * colors:默认为1
 * BitsPerComponent:默认为8
 * 返回原始数据的长度
 * 注意：只处理Predictor 12的过滤器即对应filter 2
 */

int  PngFilterReverse(Bytef *buf,uLong length,int columns,int colors,int BitsPerComponet,int filterType)
{
    int width = columns*colors*BitsPerComponet/8; //图像宽度

    int rows = length/(width+1);

    if(filterType != 12)
        return -1;
    int inptr=1,outptr=0,prevptr=0;
    //first row
    while(outptr < width)
        buf[outptr++] = buf[inptr++];

    for(int i =1; i < rows; i++)
    {
        char filter = buf[inptr++];
//        printf("filter type:%d\n",filter);
        switch(filter)
        {
            case 2:
                for(int j = 0; j < width; j++)
                    buf[outptr++] = (char) (buf[prevptr++] + buf[inptr++]);
                break;
            default:
                printf("filter type=%d,sorry not supported type\n",filter);
                return -1;
        }

    }


    printf("png filter after\n");
    for(uLong i = 0 ; i < width*rows; i++)
    {

        printf("%x ",buf[i]);
        if((i+1) % 5 == 0)
            printf("\n");
    }
    return width*rows;
}



void extract_uncompress(FILE *fileo,Bytef *buf,uLong length,vector<string> &svec,int map_flag)
{

    uLong outsize;
    unsigned char* output = myuncompress(buf,length,&outsize);
    if(output != NULL)
    {
        cout <<"output:" << endl << output << endl;
        cout << "out length: " << endl << outsize  << endl;
        if(!map_flag)
            ProcessOutput(fileo, output, outsize,svec);
        else
            ProcessOutput_map(fileo, output, outsize);
    }

    delete[] output; output=0;


}
